from Tkinter import *
import Luukas_Code
import time
import random
if Luukas_Code.Allow == True:
	class Ball:
		def __init__(self,canvas,coin1, coin2, color):
			self.canvas = canvas
			self.coin1 = coin1
			self.coin2 = coin2
			self.id = canvas.create_oval(0, 0, 10, 10, fill = color)
			self.canvas.move(self.id, 255, 345)
			self.move = False
			self.move2 = False
			self.x = 5
			self.y = 0
			self.invisible = False
			self.coins = 0
			self.hit_top = False
			self.hit_bottom = False
			self.bad_coins = 0
			self.section = 1
			self.canvas_height = self.canvas.winfo_height()
			self.canvas_width = self.canvas.winfo_width()
			self.canvas.bind_all('<KeyPress-Up>', self.up)
			self.canvas.bind_all('<KeyPress-Down>', self.down)
		def collect_coin1(self, pos):
			coin_pos = self.canvas.coords(coin.id)
			if pos[2] > coin_pos[0] and pos[0] < coin_pos[2]:
				if (pos[3] > coin_pos[1] and pos[3] < coin_pos[3]) or (pos[1] < coin_pos[3] and pos[1] > coin_pos[1]):
					return True
	
			return False
		def collect_coin2(self, pos):
			coin_pos2 = self.canvas.coords(coin2.id)
			if pos[2] > coin_pos2[0] and pos[0] < coin_pos2[2]:
				if (pos[3] > coin_pos2[1] and pos[3] < coin_pos2[3]) or (pos[1] < coin_pos2[3] and pos[1] > coin_pos2[1]):
					return True
			return False
		def coins_amount(self, pos):
			if pos[2] >= self.canvas_width:
				self.x = -5
				if self.coins == 1:
					self.section = self.section + 1
					if self.bad_coins > 0:
						return False
					self.section = self.section + 1
					return True
				return False
			return None
		def draw(self):
			self.canvas.move(self.id, self.x, self.y)
			pos = self.canvas.coords(self.id)
			if pos[1] <= 0:
				if self.invisible == True:
					self.x = -5
				else:
					self.hit_top = True
			if pos[3] >= self.canvas_height:
				if self.invisible == True:
					self.x = 5
				else:
					self.hit_bottom = True
			if self.collect_coin1(pos) == True:
				self.coins = self.coins + 1
				self.move = True
			if self.collect_coin2(pos) == True:
				self.bad_coins = self.bad_coins + 1
				self.move2 = True
		def down(self, evt):
			self.y = 20
		def up(self, evt):
			self.y = -20
	class Coin:
		def __init__(self, canvas, color, bad, x, y):
			self.canvas = canvas
			self.id = canvas.create_oval(0, 0, 10, 10, fill = color)
			self.canvas.move(self.id, x, y)
			self.x = 0
			self.y = 0
		def move(self):
			if ball.move == True:
				for x in range(0, 20):
					self.y = 5
					self.x = 0
					self.canvas.move(self.id, self.x, self.y)
				for x in range(0, 200):
					self.y = -1000
					self.canvas.move(self.id, self.x, self.y)
	class Coin2:
		def __init__(self, canvas, color, bad, x, y):
			self.canvas = canvas
			self.id = canvas.create_oval(0, 0, 250,  250, fill = color)
			self.canvas.move(self.id, x, y)
			self.x = 0
			self.y = 0
		def move(self):
			if ball.move2 == True:
				for x in range(0,220):
					self.y = 205
					self.x = 0
					self.canvas.move(self.id, self.x, self.y)
	tk = Tk()
	tk.title('bowling')
	tk.resizable(0, 0)
	tk.wm_attributes('-topmost', 1)
	canvas = Canvas(tk, width = 1000, height = 500, bd=0, highlightthickness=0)
	canvas.pack()
	tk.update()
	coin = Coin(canvas, 'yellow', False, 400, 100)
	coin2 = Coin2(canvas, 'red', True, 500, 50)
	ball = Ball(canvas, coin, coin2, 'orange')
	time.sleep(2)
	while 1:
		pos = ball.canvas.coords(ball.id)
		if ball.hit_top == False \
			and ball.hit_bottom == False \
			and (ball.coins_amount(pos) == True \
			or ball.coins_amount(pos) == None):
			ball.draw()
			coin.move()
			coin2.move()
		if ball.section == 1:
			boys = canvas.create_text(500, 10, text = 'level 1')
		if ball.coins_amount(pos) == True:
			del coin
			del coin2
			break
		tk.update_idletasks()
		tk.update()
		time.sleep(0.01)
	coin = Coin(canvas, 'yellow', False, 500,100)
	coin2 = Coin2(canvas, 'red', True, 500, 50)
	while 1:
		pos = ball.canvas.coords(ball.id)
		if ball.hit_top == False \
			and ball.hit_bottom == False \
			and (ball.coins_amount(pos) == True \
			or ball.coins_amount(pos) == None):
			ball.draw()
			coin.move()
			coin2.move()
		tk.update_idletasks()
		tk.update()
		time.sleep(0.007)
